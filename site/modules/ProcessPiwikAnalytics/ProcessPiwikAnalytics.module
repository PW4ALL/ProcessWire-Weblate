<?php
/**
 * Piwik Analytics Process Module v 0.0.1
 * View your Piwik Analytics Statistics in the Processwire Admin Panel
 * @author Luis Mendez
 * <http://misterui.de>
 * 
 * Visualizing based on Google Analytics Module by Stefan Wanzenried
 * 
 * **************************KUDOS TO************************************
 * Google Analytics Module
 * @author Stefan Wanzenried (Wanze)
 * @copyright Stefan Wanzenried
 * <http://www.everchanging.ch>
 *
 * Piwik API Wrapper
 * Author: VisualAppeal
 * Website: http://www.visualappeal.de
 * E-Mail: tim@visualappeal.de
 *
 * https://github.com/VisualAppeal/Piwik-PHP-API
 * http://piwik.org/docs/analytics-api/reference/
 * 
 * ProcessWire 2.x 
 * Copyright (C) 2011 by Ryan Cramer 
 * Licensed under GNU/GPL v2, see LICENSE.TXT
 * 
 * http://www.processwire.com
 * http://www.ryancramer.com
 * 
 ************************************************************************* 
 * 
 * Notes:
 * To display the charts with javascript, the jquery plugin 'jqplot' is used
 * http://www.jqplot.com/
 * 
 */

 class ProcessPiwikAnalytics extends Process implements Module, ConfigurableModule {

  const PAGE_NAME = 'piwik-analytics';
  const FACTOR_WIDTH_PERCENT = '0.7';
  
  protected $piwik = null; 
  protected $piwikConnectionFault = false;
  
  protected static $defaults = array(
    'site_url' => '',
    'site_id' => '',
    'site_token' => '',
    'multisite_tracking' => '',
    'maxResults' => 30,
    'cacheTime' => 1800,
    'dateFormat' => '%d %B %Y',
    'chartColor' => '#DB1174',
    'dateFormatInput' => 'Y-m-d',
    'dateRange' => 'm1',
    'compareToPrevious' => 0,
  );
    /**
   * Names of cache files by MarkupCache
   *
   */
  protected static $cacheFiles = array(
    'gaAudienceDemographics',
    'gaAudienceMobile',
    'gaAudienceSystem',
    'gaAudienceVisits',
    'gaAudienceVisitsStats',
    'gaContentPageviews',
    'gaContentStats',
    'gaContentTopPages',
    'gaTrafficSourcesKeywords',
    'gaTrafficSourcesReferral',
    'gaTrafficSourcesStats',
  );
  
  /**
   * Languages to choose in the config, has to be redone with piwik request LanguageManager
   *
   */
  protected static $languages = array(
    'en' => 'English',
    'de' => 'Deutsch',
    'fr' => 'Francais',
    'es' => 'Espanol',
  );
  
  protected static $dates = array(
    'd1' => 'last 24 hours',
    'd2' => 'last 2 days',
    'd3' => 'last 3 days',
    'd4' => 'last 4 days',
    'd5' => 'last 5 days',
    'd6' => 'last 6 days',
    'd7' => 'last week',
    'd14' => 'last 2 weeks',
    'd21' => 'last 3 weeks',
    'm1' => 'last month',
    'm2' => 'last 2 months',
    'm3' => 'last 3 months',
  );  
  
  public static function getModuleInfo() {

    return array(
      'title' => __('Piwik Analytics',__FILE__),         
      'summary' => __('View your Piwik Analytics Statistics in the Processwire Admin Panel',__FILE__),
      'version' => 102,
      'href' => 'http://misterui.de', 
      'permanent' => false, 
      'permission' => 'analytics-view', 
    );

  }
  
  public function init() {
      
    //Make sure all config variables are set in modules data 
    $config = array_merge(self::$defaults, $this->data);
    foreach ($config as $k => $v) $this->set($k, $v);
    
    $this->cache = $this->modules->get('MarkupCache');
    //Clear cache requested?
    if ($this->input->get->a && $this->input->get->a == 'clearCache') {
      $this->clearCache();
      $this->session->redirect('./');
    } 
    //Show Data from another Site ID
    if ($this->input->get->site_id && $this->input->get->change_site_id == 1) {
      $this->changeSiteId();
    }
    //Only load js/css if this is not an ajax request to get statistics
    if (!$this->config->ajax) {
      $this->config->scripts->add($this->config->urls->ProcessPiwikAnalytics . 'jqplot/jquery.jqplot.min.js');     
      $this->config->scripts->add($this->config->urls->ProcessPiwikAnalytics . 'jqplot/excanvas.min.js'); //for IE
      $this->config->scripts->add($this->config->urls->ProcessPiwikAnalytics . 'jqplot/plugins/jqplot.dateAxisRenderer.min.js');   
      $this->config->scripts->add($this->config->urls->ProcessPiwikAnalytics . 'jqplot/plugins/jqplot.highlighter.min.js');    
      $this->config->styles->add($this->config->urls->ProcessPiwikAnalytics  . 'jqplot/jquery.jqplot.min.css');      
      $this->modules->get('JqueryWireTabs');
      $this->modules->get('MarkupAdminDataTable'); //Only needed to load css/js for the tables      
      //Make some config variables available in javascript
      $this->config->js('ga_url', $this->page->url);
      $this->config->js('ga_chart_color', $this->chartColor);
    }
       
    //Initialize Piwik Connector   
    $this->loadPiwikApi();
    
    parent::init(); // required

  }

  public function ___execute() {
    //first check for successful connection to piwik
    if ($this->piwikConnectionFault == true) return "<p>Could not connect to Piwik. Please check your Settings in module configuration</p>";
    
    return $this->renderInterface();
 
  } 
  
  protected function clearCache() {
    
    foreach (self::$cacheFiles as $file) {
      $this->cache->get($file,0);
    }
    
  } 
  
  protected function changeSiteList()
    {
      $ids = $this->piwik->getAllSitesId();
      $out = "<ul class='WireTabs nav'><li>Tracked Site IDs : </li>";
      foreach($ids as $id)
      {
        $class="";
        if($this->site_id == $id)$class="class='on'";
        $out.= "<li><a {$class} href='?change_site_id=1&site_id={$id}'>{$id}</a></li> ";
      }
      $out .= "<li><br /></li></ul>";
      return $out;
    }
    
  protected function changeSiteId(){
    $newId = (int)$this->input->get->site_id;  
    $config = array('site_id' => $newId ,);
    $this->saveModuleConfig($config);
    $this->session->redirect('./');
  }
  
  protected function saveModuleConfig(array $data) {
    
    $cfg = array_merge($this->data, $data);
    $this->modules->saveModuleConfigData($this, $cfg);
  
  }

  protected function intervall($sek) {
    $i = sprintf('%d Minute%s and %d Second%s',            
            $sek / 60 % 60,
            floor($sek / 60 % 60) != 1 ? 's':'',
            $sek % 60,
            floor($sek % 60) != 1 ? 's':''
         );
    return $i;
}
   
  protected function formatDates($data){

    $jsonOut = array();
    foreach ($data as $date => $val) {
      $jsonOut[] = array($date, (int)$val);     
    }
    return json_encode(array($jsonOut));
    
  }
  
  public function ___executeAudiencevisits() {
   
   $data = $this->cache->get('gaAudienceVisits', $this->cacheTime);
      
   if (!$data) {
     $this->piwik->setPeriod(Piwik::PERIOD_DAY);
     $this->piwik->setDate('previous40' );

      $query = $this->piwik->getVisits();
      $data = $this->formatDates($query);
      }
      echo $data;
      
  }

  public function ___executeAudiencevisitsstats(){
        
      $data = $this->cache->get('gaAudienceVisitsStats', $this->cacheTime);
      
      if (!$data) {
      $data = $this->piwik->getApi();

      $titles = array(
      'nb_visits' => $this->_('Visits Total'),
      'nb_uniq_visitors' => $this->_('Unique Visitors'),
      'newVisits' => $this->_('New Visits'),
      'nb_actions' => $this->_('Pageviews'),
      'percentNewVisits' => $this->_('New Visits'),
      'nb_visits_returning' => $this->_('Returning Visits'),
      'bounce_rate' => $this->_('Bounce Rate'),
      'avg_time_on_site' => $this->_('Avg. Visit Duration'),
      );

      $table  =
 "<table class='ga_table ga_table_highlight' id='ga_table_audience_stats'>";
        $table .= "<tr>";
        $i=0;
        $columns = 4;
        $tdwidth = 100 / $columns;
        foreach ($titles as $k => $title) {
          if($i % $columns == 0) $table .= "</tr><tr>";
          $value = isset($data) ? $data : '';
          $valueF = ''; //Value formated
          $valueCompare = '';
          $total = $data['nb_visits'];
          $returningVisits = $data['nb_visits'] - $data['nb_visits_returning'];
          switch($k){
            case 'nb_uniq_visitors':
              $value = $data['nb_uniq_visitors'];
              break;
            case 'nb_actions':
              $value = $data['nb_actions'];
              break;
            case 'newVisits':
              $value = $returningVisits;
              break;
            case 'percentNewVisits':
              $newVisitPercent = "0";
              if($returningVisits > 0)
              {
                $newVisitPercent = (100 / $total) * $returningVisits;  
              }              
              $value = number_format($newVisitPercent,2)."%";
              break;
            case 'bounce_rate':
              $value = $data['bounce_rate'];
              //if ($this->compareToPrevious && isset($dataCompare[$k])) $valueCompare = $value - $dataCompare[$k];
              break;
            case 'avg_time_on_site':
              //$visitTime = $this->piwik->getSumVisitsLengthPretty();
              //$value = $visitTime['value'];
              $avgTime = $this->intervall($data['avg_time_on_site']);
              $value = $avgTime;
              break;
            case 'nb_visits_returning':
              $value = $data['nb_visits_returning'];              
              //if ($this->compareToPrevious) $valueCompare = $value - ($dataCompare['nb_visits'] - $dataCompare['nb_uniq_isits']);              
              break;
            case 'nb_visits':
              $value = $data['nb_visits'];
              //if ($this->compareToPrevious && isset($dataCompare[$k])) $valueCompare = $value - $dataCompare[$k];
              break;
          }
          $table .= "<td style='width: {$tdwidth}%;'>{$value}<div class='desc'>{$title}";
          $table .= "</div></td>";
          $i++;
        } 
        $table .= "</tr>";
        $table .= "</table>";
        $data = $table;  
        }      
       echo $data;
      
  }
  
  public function ___executeAudiencedemographics(){
    
    $data = $this->cache->get('gaAudiencedemographics', $this->cacheTime);      
    if (!$data) {
         
    $countries = json_decode($this->piwik->getCountry(),true);
    $cities = json_decode($this->piwik->getCity(),true);
    $langs = json_decode($this->piwik->getUsersLanguage(),true);
    
    $data  = $this->renderStatisticTable($countries, 'country');
    $data .= $this->renderStatisticTable($cities, 'city');
    $data .= $this->renderStatisticTable($langs, 'language');
    }
    echo $data; 
      
  }
  
  public function ___executeAudiencesystem() {
    
    $data = $this->cache->get('gaAudiencesystem', $this->cacheTime);      
    if (!$data) {      
 
      $browsers = json_decode($this->piwik->getBrowser(),true);      
      $os = json_decode($this->piwik->getOs(),true);   
      $resolutions = json_decode($this->piwik->getResolution(),true);  
      
      $data  = $this->renderStatisticTable($browsers, 'browser');
      $data .= $this->renderStatisticTable($os, 'os');
      $data .= $this->renderStatisticTable($resolutions, 'resolution');
   }
      echo $data;
    
  }   

  public function ___executeAudiencemobile() {
     
    $data = $this->cache->get('gaAudiencemobile', $this->cacheTime);      
    if (!$data) {  
      $os = json_decode($this->piwik->getMobileVsDesktop(),true);
    
     // $resolutions = $this->piwik->getResolution(); 
      $data = $this->renderStatisticTable($os, 'Device');
      //$data .= $this->renderStatisticTable($resolutions, 'resolution');
    }
      echo $data;
    
  }   

  public function ___executeContentpageviews() {
      
    $data = $this->cache->get('gaContentpageviews', $this->cacheTime);      
    if (!$data) {    
     $this->piwik->setPeriod(Piwik::PERIOD_DAY);
     $this->piwik->setDate('previous40');
    
     $query = $this->piwik->getActions();
     $data = $this->formatDates($query);
     }
     echo $data;
    
  }

  public function ___executeContentstats() {
          
    $data = $this->cache->get('gaContentpageviews', $this->cacheTime);      
    if (!$data) { 
    $data = json_decode($this->piwik->getPageUrls(),true); 
      $titles = array(
            'pageviews' => $this->_('Pageviews Total'),
            'uniquePageviews' => $this->_('Unique Pageviews Total'),
            'bounceRate' => $this->_('Bounce Rate'),
            'exitRate' => $this->_('Exits'),
          );
        
        $table  = "<table class='ga_table ga_table_highlight' id='ga_table_content_stats'>";
        $table .= "<tr>";
        $i=0;
        $columns = 4;
        $tdwidth = 100 / $columns;
        foreach ($titles as $k => $title) {
          if($i % $columns == 0) $table .= "</tr><tr>";
          $value = isset($data) ? $data : '';
          switch($k){
            case 'pageviews':
              $value = $data['0']['nb_hits'];
              break;
            case 'uniquePageviews':
              $value = $data['0']['nb_visits'];
              break;
            case 'bounceRate':
              $value = $data['0']['bounce_rate'];
              break;
            case 'exitRate':
              $value = $data['0']['exit_rate'];
              break;            
          }
          $table .= "<td style='width: {$tdwidth}%;'>{$value}<div class='desc'>{$title}";
          $table .= "</div></td>";
          $i++;
        } 
        $table .= "</tr>";
        $table .= "</table>";
        $data = $table;  
         }      
       echo $data;
     
  }
  
  public function ___executeContenttoppages() {
          
    $data = $this->cache->get('gaContenttoppages', $this->cacheTime);      
    if (!$data) { 
    $data = json_decode($this->piwik->getPageTitles(),true);
      $data = $this->renderStatisticTable($data, 'page', 'pageviews');
    
    }
    echo $data;
     
  }
  
  public function ___executeTrafficsourcesstats(){
           
    $data = $this->cache->get('gaTrafficsourcesstats', $this->cacheTime);      
    if (!$data) {    
    $data = json_decode($this->piwik->getRefererType(),true);
          
        $table  = "<table class='ga_table ga_table_highlight' id='ga_table_traffic_sources_stats'>";
        $table .= "<tr>";
        $i=0;
        $columns = 3;
        $tdwidth = 100 / $columns;
        if (isset($data) && count($data) > 0) {
          $total = $this->piwik->getVisits();
          $total = $total['value'];
          foreach ($data as $k) {
            if ($i % $columns == 0) $table .= "</tr><tr>";
            $title = $k['label'];
            $title = $this->_(ucfirst($title));
            $visits = $k['nb_visits'];
            $percent = number_format(((100 / $total) * $visits),2);
            $table .= "<td style='width: {$tdwidth}%;'>{$percent} %<div class='desc'>{$title} ({$visits} ".$this->_('visits').")</div></td>";
            $i++;
          }         
        } else {
          $table .= "<td>".$this->_('no records found')."</td>";
        }
        $table .= "</tr>";
        $table .= "</table>";
        $data = $table;
       
         }
        echo $data;
       
  }
  
  public function ___executeTrafficsourceskeywords() {
              
    $data = $this->cache->get('gaTrafficsourceskeywords', $this->cacheTime);      
    if (!$data) 
    { 
      $keywords = json_decode($this->piwik->getKeywords(),true);      
      $data  = $this->renderStatisticTable($keywords, 'Keywords');
    }
    echo $data;    
  }   

  public function ___executeTrafficsourcesreferral() {
              
    $data = $this->cache->get('gaTrafficsourceskeywords', $this->cacheTime);      
    if (!$data) {     
      $domains = json_decode($this->piwik->getWebsites(),true);
      $urls = array();
      if ($domains)
      {
       foreach($domains as $domain)
       {
         $paths = json_decode($this->piwik->getUrlsFromWebsiteId($domain['idsubdatatable']),true);     
         foreach($paths as $path)
         {
          $url  = $path['url'];
          $url .= " (<a href='{$path['url']}' target='_blank'>".$this->_('open')."</a>)";
          $urls[] = array('label' => $url, 'nb_visits' => $path['nb_visits']);
         }
        }       
       }
       $data = $this->renderStatisticTable($domains, 'domain');
       $data .= $this->renderStatisticTable($urls, 'url');          
      } 
      echo $data;     
  }   
  
  protected function renderStatisticTable($data, $title, $totalFrom='visits') {
      
      $table = $this->modules->get('MarkupAdminDataTable');
      $table->setEncodeEntities(false);
      $table->headerRow(array($title, $this->_(ucfirst($totalFrom)), $this->_('% ' . ucfirst($totalFrom))));
      $class = str_replace(' ', '_', $title);
      $table->setClass($class);
      $table->setSortable(false);
      $title = $this->_(ucfirst($title));

      if (!isset($data) || !count($data)) {
      $table->row(array($this->_('no records found')));
      return $table->render();    
      } 
      
      $total = $this->piwik->getVisits();
      $total = $total['value'];
      $count = count($data);
      foreach ($data as $k) {
        $title = $k['label'];
        $visits = $k['nb_visits'];
        $percent = (100 / $total) * $visits;
        $width = (int)($percent * self::FACTOR_WIDTH_PERCENT);
        $percent_str = number_format($percent, 2) . ' %';
        $table->row(array($title, $visits, "<div class='percent' style='width: {$width}px;'></div>{$percent_str}"));
        if ($k == 9) {
          $table->row(array("<a class='ga_display_more_rows' href='#'>".$this->_('show more')."</a>"));
        }
      }     
      return $table->render();

  }
  
  protected function renderInterface() {
    
    $form = $this->modules->get('InputfieldForm');
    $form->attr('id','ga_form');
    $form->attr('method', 'get');
        
    //Wrapper are used to separate main sections with JqueryWireTabs
    $wrapperAudience = new InputfieldWrapper();
    $wrapperAudience->attr('id','audienceWrapper');
    $wrapperAudience->attr('title',$this->_('Audience'));
    $wrapperContent = new InputfieldWrapper();
    $wrapperContent->attr('title',$this->_('Content'));
    $wrapperContent->attr('id','contentWrapper');
    $wrapperTraffic = new InputfieldWrapper();
    $wrapperTraffic->attr('title',$this->_('Traffic Sources'));
    $wrapperTraffic->attr('id','trafficWrapper');
    $wrapperOptions = new InputfieldWrapper();
    $wrapperOptions->attr('title',$this->_('coming soon'));   
    $wrapperOptions->attr('id','optionsWrapper');   
    
    //Options to change the date range
    $fieldset = $this->modules->get('InputfieldFieldset');
    $fieldset->label = $this->_('Custom date range');
    $fieldset->description = $this->_('You can set a custom date range, for example to look at statistics from the past');
    $fieldset->collapsed = 1;
    $dateFrom = $this->modules->get('InputfieldDatetime');
    $dateFrom->label = $this->_('Start date');
    $dateFrom->attr('id+name','startDate');
    $dateFrom->attr('value',$this->startDate);
    $dateFrom->dateInputFormat = $this->dateFormatInput;
    $dateFrom->columnWidth = 50;
    $dateTo = $this->modules->get('InputfieldDatetime');
    $dateTo->label = $this->_('End date');
    $dateTo->attr('id+name','endDate');
    $dateTo->attr('value',$this->endDate);
    $dateTo->dateInputFormat = $this->dateFormatInput;
    $dateTo->columnWidth = 50;
    $button = $this->modules->get('InputfieldSubmit');
    $button->attr('name', '');
    $button->attr('value',$this->_('Show'));
    $fieldset->append($dateFrom);
    $fieldset->append($dateTo);
    $fieldset->append($button);
    $wrapperOptions->append($fieldset);
    
    //Options to clear cache
    $fieldset = $this->modules->get('InputfieldFieldset');
    $fieldset->label = $this->_('Clear Cache');
    $fieldset->description = $this->_('Clear the cache to load fresh statistics from Google');
    $fieldset->collapsed = 1;
    $button = $this->modules->get('InputfieldButton');
    $button->attr('href', './?a=clearCache');
    $button->attr('value', $this->_('Clear cache now'));
    $fieldset->append($button);
    $wrapperOptions->append($fieldset);
       
    //Audience - Visits
    $html  = "<div id='audience_visits_chart' class='ga_chart_lines load'></div>";
    $html .= "<div id='audience_visits_stats' class='load'></div>";   
    $field = $this->modules->get("InputfieldMarkup"); 
    $field->label = $this->_("Visits");
    $field->attr('value',$html);
    $wrapperAudience->append($field);
    
    //Audience - Demographics
    $field = $this->modules->get("InputfieldMarkup"); 
    $field->label = $this->_("Demographics");
    $field->columnWidth = 33;
    $html  = "<div class='ga_header_links'>";
    $html .= "<a href='country' class='on'>".$this->_('Countries')."</a> / ";
    $html .= "<a href='city'>".$this->_('Cities')."</a> / ";
    $html .= "<a href='language'>".$this->_('Languages')."</a>";
    $html .= "</div>";
    $html .= "<div id='audience_demographics' class='load ga_tables_wrapper'></div>";
    $field->attr('value',$html);
    $wrapperAudience->append($field);
    
    //Audience - System
    $field = $this->modules->get("InputfieldMarkup"); 
    $field->label = $this->_("System");
    $field->columnWidth = 33;
    $html  = "<div class='ga_header_links'>";
    $html .= "<a href='browser' class='on'>".$this->_('Browsers')."</a> / ";
    $html .= "<a href='os'>".$this->_('Operating Systems')."</a> / ";
    $html .= "<a href='resolution'>".$this->_('Screen Resolutions')."</a>";
    $html .= "</div>";
    $html .= "<div id='audience_system' class='load ga_tables_wrapper'></div>";
    $field->attr('value',$html);
    $wrapperAudience->append($field);   

    //Audience - Mobile
    $field = $this->modules->get("InputfieldMarkup"); 
    $field->label = $this->_("Mobile");
    $field->columnWidth = 34;
    $html  = "<div class='ga_header_links'>";
    //$html .= "<a href='os' class='on'>".$this->_('Operating Systems')."</a>  ";
    //$html .= "<a href='resolution'>".$this->_('Screen Resolutions')."</a>";
    $html .= "</div>";
    $html .= "<div id='audience_mobile' class='load ga_tables_wrapper'></div>";
    $field->attr('value',$html);
    $wrapperAudience->append($field);   
    
    //Content Stats
    $html  = "<div id='content_pageviews_chart' class='ga_chart_lines load'></div>";
    $html .= "<div id='content_stats' class='load'></div>";
    $field = $this->modules->get("InputfieldMarkup"); 
    $field->label = $this->_("Pageviews");
    $field->attr('value',$html);
    $wrapperContent->append($field);
    
    //Content Top sites
    $field = $this->modules->get('InputfieldMarkup');
    $field->label = $this->_('Top Content');
    $field->attr('value', "<div id='content_top_pages' class='load'></div>");
    $wrapperContent->append($field);
    
    //Traffic Sources Statistics
    $field = $this->modules->get("InputfieldMarkup"); 
    $field->label = $this->_("Statistics");
    $field->attr('value',"<div id='traffic_sources_stats' class='load'></div>");
    $wrapperTraffic->append($field);

    //Traffic - Kewyords
    $field = $this->modules->get("InputfieldMarkup"); 
    $field->label = $this->_("Keywords");
    $field->columnWidth = 50;
    $field->attr('value',"<div id='traffic_sources_keywords' class='load'></div>");
    $wrapperTraffic->append($field);    

    //Traffic - Referral Traffic
    $field = $this->modules->get("InputfieldMarkup"); 
    $field->label = $this->_("Referral Traffic");
    $field->columnWidth = 50;
    $html  = "<div class='ga_header_links'>";
    $html .= "<a href='domain' class='on'>".$this->_('Domain')."</a> / ";
    $html .= "<a href='url'>".$this->_('URL')."</a>";
    $html .= "</div>";
    $html .= "<div id='traffic_sources_referral' class='load ga_tables_wrapper'></div>";
    $field->attr('value',$html);
    $wrapperTraffic->append($field);    
    
    $form->append($wrapperAudience);
    $form->append($wrapperContent);
    $form->append($wrapperTraffic);
    $form->append($wrapperOptions);
    
    $startDate = strftime($this->dateFormat,strtotime($this->startDate));
    $endDate = strftime($this->dateFormat,strtotime($this->endDate));
    
    $allIds = "";
    if($this->multisite_tracking)
    {
      $allIds = $this->changeSiteList();  
    }
    
    
    return "<h2>Data from Site ID: {$this->site_id}</h2>". $allIds . $form->render();

  }
  
  public function ___install() {

    // create the page our module will be assigned to
    $page = new Page();
    $page->template = 'admin';
    $page->name = self::PAGE_NAME; 

    // installs to the admin "Setup" menu ... change as you see fit
    $page->parent = $this->pages->get($this->config->adminRootPageID);
    $page->process = $this; 

    // we will make the page title the same as our module title
    // but you can make it whatever you want
    $info = self::getModuleInfo();
    $page->title = $info['title'];

    // save the page
    $page->save();

    // tell the user we created this page
    $this->message("Created Page: {$page->path}"); 
  }

  public function ___uninstall() {

    // find the page we installed, locating it by the process field (which has the module ID)
    // it would probably be sufficient just to locate by name, but this is just to be extra sure.
    $moduleID = $this->modules->getModuleID($this); 
    $page = $this->pages->get("template=admin, process=$moduleID, name=" . self::PAGE_NAME); 

    if($page->id) {
      // if we found the page, let the user know and delete it
      $this->message("Deleting Page: {$page->path}"); 
      $page->delete();
    }
    $this->clearCache();
  }

  private function loadPiwikApi() {

    include_once($this->config->paths->ProcessPiwikAnalytics . 'class.piwik.php');
   
    //Settings
    define('SITE_URL', $this->site_url);
    define('SITE_ID', $this->site_id);
    define('TOKEN', $this->site_token);
    
    $this->piwik  = new Piwik(SITE_URL, TOKEN, SITE_ID);
    
    $this->piwik->setLanguage($this->site_lang);
    
    $this->piwik->setPeriod(Piwik::PERIOD_YEAR);    
    $this->piwik->setDate('today');
    //$this->piwik->setRange('2013-03-21');
    //test call to piwik
    $test = $this->piwik->getApi();
    if ($this->piwik->hasError()) $this->piwikConnectionFault = true;
    
  }  

  static public function getModuleConfigInputfields(array $data) {
    
    $data = array_merge(self::$defaults, $data);
    $modules = wire('modules');
    $input = wire('input');
    $config = wire('config');
    $fields = new InputfieldWrapper();
    
    //Guess redirect URI
    if (empty($data['redirectUri'])) {
      $redirectUri  = $config->https ? 'https://' : 'http://';
      $redirectUri .= $config->httpHost . $config->urls->admin . self::PAGE_NAME . '/';
      $data['redirectUri'] = $redirectUri;
    } 
        
    //Form submitted?
    if (count($input->post)) {  
      //Clear cache
      $cache = $modules->get('MarkupCache');
      foreach (self::$cacheFiles as $file) $cache->get($file,0);
  
    }  
  
    //Piwik Url
    $field = $modules->get("InputfieldText");
    $field->attr('name+id', 'site_url');
    $field->attr('value', $data['site_url']);
    $field->label = "Piwik URL";
    $field->description = 'Enter the URL to your Piwik Installation, e.g.: http://localhost/piwik/';
    $fields->append($field);
    
    //Piwik tracked Site ID
    $field = $modules->get("InputfieldText");
    $field->attr('name+id', 'site_id');
    $field->attr('value', $data['site_id']);
    $field->label = "Piwik Site ID";
    $field->description = 'Enter the Tracked Page ID from Piwik';
    $fields->append($field); 
    
    //Piwik Token    
    $field = $modules->get("InputfieldText");
    $field->attr('name+id', 'site_token');
    $field->attr('value', $data['site_token']);
    $field->label = "Piwik Token";
    $field->description = 'Enter your Piwik API Token, you find your Token in Piwik->API Dashboard';
    $fields->append($field);       
 
    //Piwik Multisite IDs     
    $field = $modules->get("InputfieldCheckbox");
    $field->attr('name+id', 'multisite_tracking');
    $field->attr('value', $data['multisite_tracking']);
    $field->label = "Enable Multisite tracking";
    $field->description = 'With Multisite tracking enabled, the module provides a simple list of all your tracking IDs';
    $fields->append($field); 
    
    //Piwik Languages
    $field = $modules->get('InputfieldSelect');
    $field->attr('name+id', 'site_lang');
    $field->attr('value', $data['site_lang']);
    $field->label = "Piwik Language";
    $field->description = "Select your Language";
    $field->addOptions(self::$languages);
    $fields->append($field);
  
    return $fields;
  }  

}

?>
