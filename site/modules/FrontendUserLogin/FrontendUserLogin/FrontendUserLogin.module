<?php
/**
 * Processwire 'FrontendUserLogin' module
 * 
 * Login and logout frontend users.
 * 
 * @author Sturm88x4, pwFoo
 * @since 2014-09-14
 * 
 * ProcessWire 2.x
 * Copyright (C) 2011 by Ryan Cramer
 * Licensed under GNU/GPL v2, see LICENSE.TXT
 *
 * http://www.processwire.com
 * http://www.ryancramer.com
 */
class FrontendUserLogin extends WireData implements Module {
    /**
     * getModuleInfo is a module required by all modules to tell ProcessWire about them
     * 
     * @return array
     */
    public static function getModuleInfo() {
        return array(
            'title' => 'FrontendUserLogin',
            'summary' => 'Login and logout frontend users',
            'version' => '001',
            'requires' => array('FormHelper'),
        );
    }
    
    /** @var array Change FormHelper submit button */
    private $formSubmit = array('vars' => array('name' => 'submit'), 'attr' => array('value' => 'Login'));
        
    /** @var array FormHelper login form fields */
    private $formFields = array(
        'username' => array(
            'module'    => 'InputfieldText',
            'vars'      => array('name' => 'username', 'label' => 'Username', 'required' => true),
            'attr'      => array('id+name' => 'username'),
        ),
        'password' => array(
            'module'    => 'InputfieldText',
            'vars'      => array('name' => 'password', 'label' => 'Password', 'required' => true, 'type' => 'password'),
            'attr'      => array('id+name' => 'password', 'type' => 'password'),
        ),
    );
    
    public function init()
    {
    }
    
    /**
     * Handling and prepare login process
     * @param string $redirect Destination after login
     * @return string HTML Login form
     */
    public function login($redirect = null) {
        // Build login form
        $fh = $this->buildForm();
        
        // Check ProcessForgotPassword
        if($this->modules->isInstalled('ProcessForgotPassword')) {
            if($this->input->get->forgot) {
                // Password reset requested by user
                return $this->modules->get("ProcessForgotPassword")->execute();    
            }
            // add ProcessForgotPassword module link to login form
            $fh->field($this->forgotPassword());
        }

        $process = $fh->formProcess();
        
        if ($process) { // form ok, sanitizing and execute login process...
            $user = $this->sanitizer->name($process->get('username')->value);
            $pass = $process->get('password')->value;
            
            // Try to login and redirect after user sucessfully logged in...
            $login = $this->executeLogin($user, $pass);
            if ($login === true) {
                $this->session->redirect($redirect, false);
            }
            else {
                if ($login === false)   $login = __("Login failed!");
                $error = "<p style='color:red;'>{$login}</p>";  // should be added to form as InputfieldMarkup
                return $error . $fh->render();
            }
        }
        // Show login form
        return $fh->render();
    }

    protected function ___buildForm() {
        $fh = $this->modules->get('FormHelper');
        $fh->createForm($this->formFields, array('submit' => $this->formSubmit));
        return $fh;
    }
    
    protected function forgotPassword() {
        return array(
            'module'    => 'InputfieldMarkup', 
            'vars'      => array('name' => 'forgotPassword', 'value' => "<a href='./?forgot=1'>{$this->_('Forgot your password?')}</a>"),
        );
    }
    
    /**
     * Handling and prepare logout process
     * @param string $redirect Destination after logout
     */
    public function logout($redirect = null) {
        $this->executeLogout();
        $this->session->redirect($redirect, false);
    }
    
    /**
     * Login with error and exception handling
     * @param string $user login user name
     * @param string $pass login password
     * @return boolean true / false or exception message
     */
    protected function ___executeLogin($user, $pass) {
        try {
            $login = $this->session->login($user, $pass);
            
            if($login && $login->id) return true;
            else return false;
        } 
        catch(Exception $e) {
            return $e->getMessage();
        }
    }
    
    /**
     * Logout current user and make 
     * @param string $redirect Destination after logout
     */
    protected function ___executeLogout() {
        $this->session->logout();
    }
}